<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>DtWinVer v1.82</title>
<link rel="stylesheet" type="text/css" href="naughter.css">
</head>

<body bgcolor="#FFFFFF">

<h2 align="left">
<img src="dtwinver.gif" width="67" height="58"
alt="DTWinVer Logo">DtWinVer v1.82</h2>

<p>&nbsp;</p>

<table>
<TBODY>
  <tr>
    <td><a href="#Features">Features</a></td>
  </tr>
  <tr>
    <td><a href="#Copyright">Copyright</a></td>
  </tr>
  <tr>
    <td><a href="#History">History</a></td>
  </tr>
  <tr>
    <td><a href="#API">API Reference</a></td>
  </tr>
  <tr>
    <td><a href="#Notes">Notes</a></td>
  </tr>
  <tr>
    <td><a href="#Contact">Contacting the Author</a></td>
  </tr>
</TBODY>
</table>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Features"></a>Features</h2>

<p>DtWinVer is a C++ class which 
provides a comprehensive method to determine which OS the program that calls it 
is running on. All methods it uses are fully documented on various articles on 
MSDN. The routine provides the emulated OS as well as the underlying OS. e.g to a DOS program Windows 95 looks like MS-DOS 7.0. A full list of the OS&#8217;s 
it can detect are:<ul>
  <li>DOS</li>
  <li>Windows 3.0</li>
  <li>Windows 3.1</li>
  <li>Windows 3.11</li>
  <li>Windows for Workgroups</li>
  <li>Win32s (if you can call this 
	an OS &lt;g&gt;)</li>
  <li>Windows CE 1.0&nbsp;</li>
  <li>Windows CE 2.0</li>
  <li>Windows CE 2.1</li>
  <li>Windows CE 2.11</li>
  <li>Windows CE 3.0</li>
  <li>Windows CE.Net</li>
  <li>Windows CE 5</li>
  <li>Windows 95 Gold </li>
  <li>Windows 95 Service Pack 1</li>
  <li>Windows 95B aka OEM Service 
	Release 2[.1]</li>
  <li>Windows 95C aka OEM Service 
	Release 2.5</li>
  <li>Windows 98</li>
  <li>Windows 98 Service Pack 1</li>
  <li>Windows 98 Second Edition</li>
  <li>Windows Millennium Edition</li>
  <li>NT 3.1</li>
  <li>NT 3.5</li>
  <li>NT 3.51</li>
  <li>All flavours of NT, 2000 and 
	XP Service packs</li>
  <li>NT 4.0</li>
  <li>NT Workstation, Server, PDC, 
	BDC, Datacenter, Enterprise</li>
  <li>Windows 2000</li>
  <li>Windows 2000 Professional, 
	Server, Domain Controller, Datacenter and Advanced Server</li>
  <li>Windows Terminal Services and 
	Back Office</li>
  <li>  Windows XP Starter Edition, XP Personal &amp; XP 
	Professional</li>
  <li> Windows Server 2003, Windows 
	Server 2003 (Web Edition), Windows Server 2003 Domain Controller, 
	Datacenter, Enterprise Server &amp; 64 bit Editions</li>
  <li> Windows Server 2003 R2, 
	Windows Server 2003 R2 (Web Edition), Windows Server 2003 R2 Domain 
	Controller, Datacenter, Enterprise Server &amp; 64 bit Editions</li>
  <li>Embedded Windows NT / 2000 / XP.</li>
  <li>XP Media Center Edition</li>
  <li>Windows XP Tablet PC Edition</li>
  <li>Windows Vista (All SKU's including Starter Edition, Home Basic N, Home 
	Basic, Home Premium, Home Premium N, Business N, Business, Enterprise N, Enterprise, Ultimate 
	N, Ultimate).</li>
  <li>Windows Server 2008, Windows 
	Server 2008 Web Edition, Windows Server 2008 Datacenter, Enterprise Server, 
	Core Server, Hyper-V &amp; 64 bit Editions</li>
	<li>Windows Essential Business Server Management, Messaging and Security 
	Server</li>
	<li>Windows Storage Enterprise, Express, Standard and Workgroup Server</li>
	<li>Windows Server 2003 &amp; 2008 Computer Cluster Edition</li>
	<li>Windows Cluster Server</li>
	<li>Windows Home Server</li>
	<li>Windows &quot;Security Application&quot; mode</li>
	<li>BackOffice, Small Business Server &amp; Small Business Server Premium installed</li>
	<li>Windows 7 (All SKU's including Starter Edition, Home Basic, Home 
	Premium, Professional, Enterprise, Enterprise, Ultimate, 64 bit, N &amp; E 
	editions).</li>
	<li>Windows Server 2008 R2, Windows 
	Server 2008 R2 Web Edition, Windows Server 2008 R2 Datacenter, Enterprise Server, 
	Core Server, Hyper-V &amp; 64 bit Editions.</li>
	<li>Windows Server 2008 R2 Foundation Server</li>
	<li>Windows Multipoint Server 2010</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

<p>Some of the possible scenarios it 
can report on are: 

<ul>
  <li>&quot;You are running an emulated 
	DOS v5.50 On&nbsp; Windows 2000 Server Build 2195 Service Pack 2&quot;</li>
  <li>&quot;You are running an emulated 
	Windows 3.95 on Windows 95 v4.0 Build 950&quot;</li>
  <li>&quot;You are running Windows for 
	Workgroups on DOS v6.22&quot;</li>
  <li>&quot;You are running NT Server 
	v3.51&quot;</li>
  <li>&quot;You are running this 32 bit 
	process on the WOW64 layer of 64 bit Windows&quot;</li>
  <li>&quot;You are running an 
	application on Windows NT Terminal Server.</li>
  <li>This NT machine is acting as a 
	stand alone server, primary domain controller or backup domain controller.</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><b><a name="Copyright"></a>Copyright</b></h2>
<ul>
  <li>You are allowed to include the source code in
    any product (commercial, shareware, freeware or otherwise) when your product
    is released in binary form.</li>
  <li>You are allowed to modify the source code in
    any way you want except you cannot modify the copyright details at the top
    of each module.</li>
  <li>If you want to distribute source code with
    your application, then you are only allowed to distribute versions released
    by the author. This is to maintain a single distribution point for the
    source code.</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="History"></a>History</h2>

<p><strong>v1.1 (8 May 1997)</strong>

<ul>
  <li>Fix to remove Unicode and 
	TCHAR code when being compiled for Win16.</li>
</ul>

<p><strong>v1.2 (13 September 1998)</strong> 

<ul>
  <li>Updated the sample app plus 
	the DtWinVer code to explicitly support Windows 98.</li>
</ul>

<p><strong>v1.3 (22 June 1998)</strong> 

<ul>
  <li>UNICODE enabled the code.</li>
  <li>Removed need for the dwOSVersionInfoSize variable.</li>
  <li>Added support for detecting Build Number of 95 and 98 from DOS code path.</li>
  <li>Now ships as standard with VC 5 workspace files.</li>
  <li>Added explicit support for Windows 95 SP 1.</li>
  <li>Added explicit support for Windows 95 OSR 2.</li>
  <li>Added explicit support for Windows 98 Second Edition.</li>
  <li>Added explicit support for Windows 2000.</li>
  <li>Added explicit support for Windows CE.</li>
  <li>Added explicit support for Windows Terminal Server's.</li>
  <li>  Added explicit support for NT Stand Alone Server's.</li>
  <li>Added explicit support for NT Primary Domain Controller's.</li>
  <li>Added explicit support for NT Backup Domain Controller's.</li>
</ul>

<p><strong>v1.31 (23 July 1999)</strong> 

<ul>
  <li> Tested out support for Windows 98 SE, minor changes required</li>
</ul>

<p><strong>v1.32 (26 July 1999)</strong> 

<ul>
  <li>Added explicit support for Windows 98 SP 1.</li>
</ul>

<p><strong>v1.33 (28 July 1999)</strong> 

<ul>
  <li>Fixed a problem when application is build in non-huge/large memory model 
	in Win16.</li>
  <li> Added explicit support for returning NT and Win9x service pack 
	information from Win32 and Win16 code paths.</li>
  <li> Updated test program to not bother reporting on any info which does not 
	exist. e.g. if there is no service pack installed, then we don't bother 
	displaying any info about service packs.</li>
  <li> Added explicit support for NT Enterprise Edition.</li>
</ul>

<p><strong>v1.34 (2 February 2000)</strong> 

<ul>
  <li>Fixed a minor copy and paste bug in the test program.</li>
</ul>

<p><strong>v1.35 (30 June 2000)</strong> 

<ul>
  <li> Added explicit support for Windows Millennium Edition</li>
</ul>

<p><strong>v1.4 (29 January 2001)</strong> 

<ul>
  <li>Added explicit support for XP Personal</li>
  <li>Added explicit support for XP Professional</li>
  <li>Added explicit support for XP Server</li>
  <li>Added explicit support for XP Advanced Server</li>
  <li>Added explicit support for XP Datacenter</li>
  <li>Added explicit support for XP 64 bit (all flavours)</li>
  <li>Made all the code into a C++ class called COSVersion</li>
  <li>Rewrote all the generic thunk code to be easier to follow</li>
  <li>Generic thunk code now uses CallProcEx32W</li>
  <li>Added explicit support for BackOffice Small Business Edition</li>
  <li>Added explicit support for Terminal Services</li>
  <li>16 bit code path now can determine ProductSuite and ProductType type thro 
	additional generic thunk code</li>
  <li>Provided a 64 bit test binary and make batch file (make64.bat) for those 
	lucky enough to have an Itanium processor and a beta of 64 bit Windows XP.</li>
  <li>Provided a Embedded C++ workspace and X86 Release binary.</li>
  <li>Updated copyright information</li>
</ul>

<p><strong>v1.41 (10 February 2001)</strong> 

<ul>
  <li>Updated function names etc following MS decision to call Whistler &quot;Windows 
	XP&quot;.</li>
</ul>

<p><strong>v1.42 (10 October 2001)</strong> 

<ul>
  <li> Added code to 32 bit code path to detect if we are being run under 64 bit 
	Windows. Also updated the sample app to distinguish between emulated 64 bit 
	and underlying 64 bit.</li>
  <li>Updated the sample app to call XP Server its proper name which will be 
	&quot;Windows.NET Server&quot;</li>
</ul>

<p><strong>v1.5 (13 December 2001)</strong> 

<ul>
  <li> Major upgrade. Now 16 bit DOS path can return as much information as 
	native Win32 code. This is achieved by spawning off the Win32 utility 
	WriteVer with a special command line option. Please note that if you intend 
	deploying dtwinver then you must now ship the writever.exe file in addition 
	to linking in the dtwinver code into your application. Also this utility 
	needs to be in the path or current directory when the dtwinver code is 
	executing. Thanks to Chaz Angell for prompted me into finding a solution for 
	this last major item missing in dtwinver.</li>
</ul>

<p><strong>23 March 2002</strong> 

<ul>
  <li> Updated Win32 and Win64 apps to have version info in them. No changes 
	have been made to the main dtwinver code.</li>
</ul>

<p><strong>v1.6 (30 August 2002)</strong> 

<ul>
  <li> Provided an update CE workspace to work correctly in eMbedded Visual C++ 
	v3. All build configurations for eVC 3 have also been provided.</li>
  <li>Optimized the usage of _tcscat and _tcscpy in the test app which comes 
	with Dtwinver.cpp</li>
  <li>OEM Info string and Platform Type string is now returned for CE code path</li>
  <li>Fixed display of minor version number for example Windows.Net is version 
	number v5.20 but should be shown as 5.2 to be consistent with what the 
	native ver command displays</li>
  <li>Provided a new CE workspace to work correctly in eMbedded Visual C++ v4. 
	All build configurations for eVC 4 have also been provided.</li>
</ul>

<p><strong>v1.61 (8 October 2002)</strong> 

<ul>
  <li> Now uses OSVERSIONINFOEX it possible in the Win32 or Win64 code paths. 
	This provides for more reliably detection of Windows XP Home Edition.</li>
  <li>Renamed the functions which detect Windows .NET Server 2003. Also updated 
	the test code which prints out these names</li>
  <li>Provided explicit support for Windows .NET Web Server</li>
  <li>Fixed a bug in the display of the minor OS version number on Windows .NET 
	Server.</li>
  <li>Made the project for WriteVer a VC 5 project instead of VC 6 which it was 
	up until now.</li>
  <li>Reworked the internal function WhichNTProduct to use a constant input 
	string parameter</li>
  <li>Added explicit support for Windows NT / 2000 / XP Embedded</li>
  <li>Added explicit support for detecting Terminal Services in remote admin 
	mode</li>
</ul>

<p><strong>v1.62 (11 October 2002)</strong> 

<ul>
  <li>Fixed a problem where on Windows XP, the test program will include the 
	text &quot;(Standard Edition)&quot;</li>
  <li>Added two variables to the OS_VERSION_INFO structure to report the minor 
	service pack number</li>
  <li>Removed the OS_VERSION_INFO structure from the global namespace</li>
  <li>Removed all static member variables from the class</li>
  <li>Added a member variable to the OS_VERSION_INFO to return the various 
	&quot;suites&quot; installed</li>
  <li>Reduced the number of calls to WriteVer to 1 when called from dos 
	code path.</li>
  <li>Completely reworked the internal WhichNTProduct method</li>
  <li>General tidy up of the header file</li>
  <li>Completely reworked the ValidateProductSuite method</li>
  <li>Now only 1 call is made to WhichNTProduct throughout a single call to 
	COSVersion::GetVersion</li>
  <li>Now only 1 call is made to ValidateProductSuite throughout a single call 
	to COSVersion::GetVersion</li>
  <li>Fixed an unitialized variable problem in COSVersion::IsUnderlying64Bit</li>
  <li>Changed &quot;WhichNTProduct&quot; method to &quot;GetNTOSTypeFromRegistry&quot;</li>
  <li>Changed &quot;ValidateProductSuite&quot; method to 
	&quot;GetProductSuiteDetailsFromRegistry&quot;.</li>
  <li>Now correctly reports on Terminal Services being in Remote Admin Mode on 
	OS which do not support calling GetVersionEx using an OSVERSIONINFOEX 
	structure i.e any NT 4 install prior to SP6.</li>
  <li>16 bit Windows code path now reports as much NT information as the Win32 
	code path&nbsp;</li>
  <li>Fixed a bug in COSVersion::GetInfoBySpawingWriteVer which was failing if 
	it encountered an empty CSD string. This was spotted on Windows .NET Server 
	which since it is in beta still (as of October 2002) does not have any 
	service pack!.</li>
</ul>

<p><strong>v1.63 (10 January 2003)</strong> 

<ul>
  <li>Update to support MS deciding to change the name of their Whistler Server 
	product. The product will now be called &quot;Windows Server 2003&quot;.</li>
</ul>

<p><strong>v1.64 (30 January 2003)</strong> 

<ul>
  <li>Added explicit support for detecting NT Service Pack 6a</li>
</ul>

<p><strong>v1.65 (8 February 2003)</strong> 

<ul>
  <li>Added explicit support for detecting Windows XP Service Pack 1a</li>
  <li>Added support to determine the HAL on NT Kernels. Thanks to Christian 
	Kaiser for suggesting this addition.</li>
</ul>

<p><strong>v1.66 (12 February 2003)</strong> 

<ul>
  <li>Fixed a compiler warning in GetNTServicePackFromRegistry which occurs when 
	the code is compiled with the Watcom compiler. Thanks to Christian Kaiser 
	for reporting this.</li>
</ul>

<p><strong>v1.67 (8 March 2003)</strong><ul>
  <li>Updated a comment in COSVersion::GetProductSuiteDetailsFromRegistry re NT 
	Embedded.</li>
  <li>A comment from John A. Vorchak: On NTe (NT Embedded) and XPE (XP 
	Embedded), all of the versions (of DTWinver) work just fine so long as the 
	components to support them are included in the images, which itself is kind 
	of a crap shoot. I think that you would probably find that most images will 
	not support the DOS or Win16 versions however most will support the Win32. 
	Many of the images that folks build either do not include the DOS subsystem 
	and some of them do not include Explorer, so it really can't be said that 
	all builds will support them however it is not difficult for a developer to 
	understand which version would work for them as they understand their target 
	systems better than anyone and at least one version would certainly work for 
	almost all images. As far as Win2k (Server Appliance Kit), I haven't done 
	enough testing with that platform, nor do I currently have any built images 
	with the SAK to say positively or otherwise. More than likely you would find 
	no problems with the SAK images since they typically follow W2k much more 
	than NTe or XPE do. Author: If you are writing for an embedded OS, then 
	there is little use for DTWinver!!, since the developer has very tight 
	control over the runtime environment. Also if you do use DTWinver on an 
	embedded version of Windows, you will probably compile in the dtwinver code 
	rather than ship the sample binaries I include in the dtwinver download.</li>
</ul>

<p><strong>v1.68 (10 April 2004)</strong><ul>
  <li>Removed a number of unreferenced variable warnings when you compile the 
	code on VS.NET 2003. Thanks to Edward Livingston for reporting these issues.</li>
  <li>Now includes support for Windows XP Media Center Edition. Please note that 
	if you want to do specific version checking of what version of Media Center 
	you have installed then you should use my CVersionInfo classes at <a href="http://www.naughter.com/versioninfo.html">
  http://www.naughter.com/versioninfo.html</a> in conjunction with the following 
	information which I culled from
  <a href="http://salloway.org.uk/mediacenter/2004/version.htm">
	http://salloway.org.uk/mediacenter/2004/version.htm</a> which describes 
	the various version numbers of ehshell.exe in \Windows\ehome to the 
	corresponding versions of XP Media Center Edition.</li>
	<li>dtwinver now returns the processor architecture via a call to 
	GetSystemInfo or GetNativeSystemInfo. This is used to differentiate between 
	64 Bit Windows on Itanium and AMD64 processors.</li>
	<li>Renamed the global preprocesor defines used by dtwinver to use more unique 
	names</li>
	<li>Added make files and binaries for AMD64 processors.</li>
</ul>

<p><strong>v1.69 (26 June 2005)</strong></p>

<ul>
  <li>INTEL_PROCESSOR enum is now more correctly know as IA32 which means x86 32 
	bit.</li>
  <li>Fixed a bug where the OS_VERSION_INFO parameter was not be zero set in the 
	function COSVersion::GetVersion. Thanks to &quot;Remio&quot; for reporting this issue.</li>
</ul>

<p><b>v1.70 (29 June 2005)</b></p>

<ul>
  <li>Added support for detecting if code is running on Tablet PC Edition of 
	Windows.</li>
  <li>Code now uses GetSystemMetrics call in preference to direct registry calls 
	to detect Media Center Edition of Windows.</li>
  <li>Renamed the functions which differentiate between the different OEM 
	Service Release versions of Windows 95. They are OSR 2[.1] = Win95B, OSR2.5 
	= Win95C. For the gory details please see the KB article at
    <a href="http://support.microsoft.com/kb/q158238/">                          
	http://support.microsoft.com/kb/q158238/</a>. The code now also explicitly 
	supports Win95C.</li>
</ul>

<p><b>v1.71 (22 July 2005)</b></p>

<ul>
  <li> Now includes support for Windows Vista, formerly Windows codename 
	&quot;Longhorn&quot;.</li>
</ul>

<p><b>v1.72 (6 September 2005)</b></p>

<ul>
  <li>Renamed some of the functions 
	which detect Longhorn Server. Previously the functions were incorrectly 
	referring to Vista Server. Vista is the name of the Windows Client. As of 
	yet, a product name has not been picked for Longhorn Server.</li>
  <li>Now includes support for 
	Windows Server 2003 R2.</li>
  <li>Now includes support for 
	Windows XP Starter Edition and any future versions such as Windows Vista 
	Starter Edition</li>
</ul>

<p><b>v1.73 (17 May 2006)</b></p>

<ul>
  <li>Updated copyright details.</li>
	<li>Updated documentation to use the same style as the web site.</li>
	<li>Updated documentation on version numbers which XP Media Center can have.</li>
	<li>Added support for Windows Server 2003, Computer Cluster Edition</li>
	<li>Added support for Windows Storage Server 2003 R2</li>
	<li>Added support for detecting if Windows is installed in a &quot;Security 
	Application&quot; mode</li>
	<li>Added support for detecting BackOffice components are installed</li>
	<li>Provided Visual Studio 2005 solution to build DtWinver with.</li>
</ul>

<p><b>v1.74 (21 September 2006)</b></p>

<ul>
  <li>Included support for detecting all the different types of Vista SKU's, 
	namely: Windows Vista Starter Edition, Windows Vista Home Basic N, Windows 
	Vista Home Basic, Windows Vista Home Premium, Windows Vista Business N, 
	Windows Vista Business, Windows Vista Enterprise, and Windows Vista 
	Ultimate.</li>
	<li>Fixed a bug in the displaying of unknown versions of Windows in the 
	sample app</li>
</ul>

<p><b>v1.75 (18 May 2007)</b></p>

<ul>
  <li>Updated copyright details.</li>
	<li>Updated code to refer to Windows Server 2008 which was formerly known as 
	Windows Server codename &quot;Longhorn&quot;.</li>
</ul>

<p><b>v1.76 (20 June 2007)</b></p>

<ul>
	<li>Include support for detecting Windows Home Server. Thanks to  
	Petr Stejskal for suggesting this update.</li>
</ul>

<p><b>v1.77 (14 June 2008)</b></p>

<ul>
	<li>Updated copyright details</li>
	<li>Code now compiles cleanly using Code Analysis (/analyze)</li>
	<li>Added support for Vista Home Premium N</li>
	<li>Added support for Vista Business N</li>
	<li>Added support for Vista Enterprise N</li>
	<li>Added support for Vista Ultimate N</li>
	<li>Added support for Windows Core Server</li>
	<li>Added support for Windows Hyper-V</li>
	<li>Added support for Windows Essential Business Server Management Server</li>
	<li>Added support for Windows Essential Business Server Messaging Server</li>
	<li>Added support for Windows Essential Business Server Security Server</li>
	<li>Added support for Windows Storage Server Enterprise Edition</li>
	<li>Added support for Windows Storage Server Express Edition</li>
	<li>Added support for Windows Storage Server Standard Edition</li>
	<li>Added support for Windows Storage Server Workgroup Edition </li>
	<li>Added support for Windows Cluster Server Edition </li>
	<li>Added support for Windows Business Server Premium Edition</li>
</ul>
<p><b>v1.78 (15 December 2008)</b></p>
<ul>
	<li>Added support for detecting Windows 7</li>
</ul>
<p><b>v1.79 (12 February 2009)</b></p>
<ul>
	<li>Updated the VC 2005 project file to use more reasonable default project 
	settings</li>
	<li>Updated copyright details</li>
	<li>Includes provisional support for the Windows 7 Professional SKU. Note 
	that the code currently assumes that the BUSINESS SKU value refers to the 
	newly documented SKU of &quot;Windows 7 Professional&quot;. I have not found any 
	information to confirm or deny this but this should become clearer as we 
	approach the release of &quot;Windows 7. Any feedback on this would be much 
	appreciated.</li>
</ul>
<p><b>v1.80 (5 July 2010)</b></p>
<ul>
	<li>Updated copyright details</li>
	<li>Added a IsWindowsVistaOrWindowsServer2008 method </li>
	<li>Added a IsWindows7OrWindowsServer2008R2 method</li>
	<li>Reworked the logic in all the Windows 2008 methods to use 
	IsWindowsVistaOrWindowsServer2008 instead of IsWindowsServer2008. Thanks to 
	Matt Fox for reporting this issue.</li>
	<li>Added comprehensive support for Windows 2008 R2</li>
	<li>Reworked the GetInfoBySpawingWriteVer method to work correctly on OSes 
	which use UAC. The code now uses _tempnam which places the temporary file in 
	the &quot;TMP&quot; directory.</li>
	<li>Fixed a bug in GetInfoBySpawingWriteVer where it incorrectly parsed the 
	dwSuiteMask values.</li>
	<li>Extended WriteVer and GetInfoBySpawingWriteVer to also update 
	dwSuiteMask2</li>
	<li>Fixed a bug in the test app where it was incorrectly calling 
	IsEmulated64Bit instead of IsUnderlying64Bit to report whether the 
	underlying OS was 64 bit or not.</li>
</ul>
<p><b>v1.81 (5 July 2010)</b></p>
<ul>
	<li>Added support for the following Product types: PRODUCT_ENTERPRISE_E, 
	PRODUCT_HOME_BASIC_E, PRODUCT_HOME_PREMIUM_E, PRODUCT_PROFESSIONAL, 
	PRODUCT_PROFESSIONAL_E, PRODUCT_PROFESSIONAL_N, 
	PRODUCT_SERVER_FOR_SMALLBUSINESS, PRODUCT_SERVER_FOR_SMALLBUSINESS_V, 
	PRODUCT_SERVER_FOUNDATION, PRODUCT_SOLUTION_EMBEDDEDSERVER, 
	PRODUCT_STARTER_E, PRODUCT_STARTER_N, PRODUCT_ULTIMATE_E. This means that 
	the code now fully supports Windows 7 Professional, Windows E Edition (The 
	version of Windows 7 that was to
	be released in Europe without Internet Explorer 8), Windows Server 2008 R2 
	Foundation Server and Windows Multipoint Server 2010.</li>
	<li>Changed some of the names of the class methods for overall consistency</li>
</ul>
<p><b>v1.82 (8 August 2010)</b></p>
<ul>
	<li>The code now differentiates between having the Hyper-V tools installed 
	and the actual Hyper-V OS. Thanks to Scott Pawloski for reporting this 
	issue.&nbsp; </li>
	<li>I have removed the CE 3 &amp; 4 and Dos And Win16 binaries from the zip 
	file. The code should still compile if you still have these ancient 
	compilers installed.</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="API"></a>API</h2>

<p>The API provided is through a C++ class namely &quot;COSVersion&quot;. It provides a 
number of functions, the most important being &quot;GetVersion&quot; which does the actual 
version detection. There are a number of additional functions which tell you if 
a certain &quot;flavour&quot; of an operating system is installed. For more info on how to 
use the function, please see the code in test.cpp.</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Notes"></a>Notes</h2>

<p>The code uses C++ but does not 
use MFC. Files are also included which builds a simple application which reports 
the OS version, through a message box on Windows and stdio in DOS.</p>

<p>The project files included are: 

<ul>
  <li>dosver.mak (VC 1.5x for DOS)</li>
  <li>winver.mak (VC 1.5x for Win16)</li>
  <li>winverce3.vcw (Embedded Visual 
	C++ 3 for Windows CE).</li>
  <li>winverce4.vcw (Embedded Visual 
	C++ 4 for Windows CE).</li>
  <li>winver32.sln (Visual Studio 2005 solution for Win32 and x64)</li>
</ul>

<p>Also included in the winver32 
workspace is a sub project to build the WriteVer executable needed for the 16 
bit DOS code path in DtWinVer.</p>

<p>Areas where the code may prove 
useful are:

<ul>
  <li>A DOS program wants to know if 
	it can be allowed access to hardware ports which is not available on NT, but 
	is available on DOS, Windows 3.x &amp; Windows 95.</li>
  <li>A Win32 program wants to know 
	if the Windows 95 UI is available.</li>
  <li>A Win16 program wants to know 
	if it can call the Win32 API via generic thunking.</li>
  <li>Checking for the existence of 
	a certain service pack on Windows 95, 98, 2000 or XP.</li>
</ul>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2><a name="Contact"></a>Contacting the Author</h2>

<p>PJ Naughter<br>
Email: <a href="mailto:pjna@naughter.com">pjna@naughter.com</a><br>
Web: <a href="http://www.naughter.com">http://www.naughter.com</a><br>
8 August 2010</p>
</body>
</html>